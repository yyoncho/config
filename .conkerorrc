

url_completion_use_history = true;

// block flash
require("content-policy.js");

require("adblockplus.js");

require("google-clean-links.js");

require("global-overlay-keymap");
define_key_alias("C-j", "return");

// open in new buffer
define_key(content_buffer_normal_keymap, "d", "follow-new-buffer");

// open in new buffer
define_key(hint_keymap, "C-j", "hints-exit");

interactive("open-gmail", "Go to gmail", "follow",
            $browser_object = "http://gmail.com/");
define_key(content_buffer_normal_keymap, "y g", "open-gmail");

interactive("open-mytt", "Go to mytt", "follow",
            $browser_object = "http://mytabletennis.net");
define_key(content_buffer_normal_keymap, "y t", "open-mytt");

interactive("open-stash", "Go to stash", "follow",
            $browser_object = "https://stash.tick42.com/");
define_key(content_buffer_normal_keymap, "y s", "open-stash");

interactive("open-jira", "Go to jira", "follow",
            $browser_object = "http://jira.tick42.com/");
define_key(content_buffer_normal_keymap, "y j", "open-jira");

interactive("open-myfitnesspal", "Go to jira", "follow",
            $browser_object = "http://myfitnesspal.com/");
define_key(content_buffer_normal_keymap, "y f", "open-myfitnesspal");

interactive("open-bamboo", "Go to bamboo", "follow",
            $browser_object = "http://ci.tick42.com:8085/");
define_key(content_buffer_normal_keymap, "y b", "open-bamboo");

interactive("open-cm", "Go to CM", "follow",
            $browser_object = "https://stash.tick42.com/projects/CM");
define_key(content_buffer_normal_keymap, "y c m", "open-cm");

interactive("open-jira-tempo", "Go to jiratempo", "follow",
            $browser_object = "http://jira.tick42.com/secure/TempoUserBoard!timesheet.jspa");
define_key(content_buffer_normal_keymap, "y t", "open-jira-tempo");

define_key(content_buffer_normal_keymap, "p", "back")
define_key(content_buffer_normal_keymap, "M-d", "find-url")

define_key(content_buffer_normal_keymap, "n", "forward")

require("page-modes/google-search-results.js");
google_search_bind_number_shortcuts()
define_key(content_buffer_normal_keymap, "M-g", "google-search-results-mode")


// load urls from the command line in new buffers instead
// of new windows.
url_remoting_fn = load_url_in_new_buffer;

xkcd_add_title = true;

webjumps.g = webjumps.google;
webjumps.w = webjumps.wikipedia;
webjumps.l = webjumps.lucky;

require("clicks-in-new-buffer.js");

// Set to either OPEN_NEW_BUFFER or OPEN_NEW_BUFFER_BACKGROUND
clicks_in_new_buffer_target = OPEN_NEW_BUFFER_BACKGROUND; // Now buffers open in background.

// Set to 0 = left mouse, 1 = middle mouse, 2 = right mouse
nclicks_in_new_buffer_button = 2; //  Now right mouse follows links in new buffers.


require("new-tabs.js");

// navigation to buffers
function define_switch_buffer_key (key, buf_num) {
    define_key(default_global_keymap, key,
               function (I) {
			   	   dumpln("Log buffer" + i);			   			
                   switch_to_buffer(I.window,
                                    I.window.buffers.get_buffer(buf_num));
               });
}

for (let i = 0; i < 10; ++i) {
    define_switch_buffer_key(String((i+1)%10), i);
}

for (let i = 0; i < 10; ++i) {
    define_switch_buffer_key("` " + String((i+1)%10), i + 10);
}

can_kill_last_buffer = false

// I think by the time kill_buffer_hook runs the buffer is gone so I
// patch kill_buffer

var kill_buffer_original = kill_buffer_original || kill_buffer;
var killed_buffer_urls = [];

kill_buffer = function (buffer, force) {
	var display_uri = buffer.display_uri_string
    if (display_uri) {
		var i = killed_buffer_urls.indexOf(display_uri);

		if (i != -1) {
			killed_buffer_urls.splice(i, 1);
		}
        killed_buffer_urls.push(display_uri);
    }
    kill_buffer_original(buffer,force);
};

interactive("restore-killed-buffer-url", "Loads url from a previously killed buffer",
            function restore_killed_buffer_url (I) {
                if (killed_buffer_urls.length !== 0) {                
                    var url = yield I.minibuffer.read(
                        $prompt = "Restore killed url:",
                        $completer = new all_word_completer($completions = killed_buffer_urls),
                        $default_completion = killed_buffer_urls[killed_buffer_urls.length - 1],
                        $auto_complete = "url",
                        $auto_complete_initial = true,
                        $auto_complete_delay = 0,
                        $require_match = true);
                    
                    load_url_in_new_buffer(url);
                } else {
                    I.window.minibuffer.message("No killed buffer urls");
                }
            });

define_key(content_buffer_normal_keymap, "C-M-t", "restore-killed-buffer-url")

define_key(content_buffer_normal_keymap, "C-t", "find-url-new-buffer")

// selection searches
function create_selection_search(webjump, key) {
    interactive(webjump+"-selection-search",
                "Search " + webjump + " with selection contents",
                "find-url-new-buffer",
                $browser_object = function (I) {
                    return webjump + " " + I.buffer.top_frame.getSelection();});
    define_key(content_buffer_normal_keymap, key, webjump + "-selection-search");
}

create_selection_search("google", "u");

// load_paths.unshift("chrome://conkeror-contrib/content/");


// user_pref("devtools.debugger.remote-enabled", true);

// var debugging_server_port = debugging_server_port || 6000;

// function start_debugging_server () {
//     Components.utils.import('resource://gre/modules/devtools/dbg-server.jsm');
//                 if (!DebuggerServer.initialized) {
//                     DebuggerServer.init();
//                     DebuggerServer.addBrowserActors();
//                 }
//     if (version_compare(get_mozilla_version(), "37.0") >= 0) {
//         let listener = DebuggerServer.createListener();
//         listener.portOrPath = debugging_server_port;
//         listener.open();
//     }
//     else {
//         DebuggerServer.openListener(debugging_server_port);
//     }
// }

// interactive("start-debugging-server",
//             "Starts the debugging server that you can connect to with Firefox",
//             start_debugging_server);


function block_flash (content_type, content_location) {
    var Y = content_policy_accept, N = content_policy_reject;
    var action = ({ "s.ytimg.com":Y }
                  [content_location.host] || N);
    if (action == N)
        dumpln("blocked flash: "+content_location.spec);
    return action;
}

content_policy_bytype_table.object = block_flash;
add_hook("content_policy_hook", content_policy_bytype);


function textToCyliric (text) {
	var result = "";
	var bf = ['a', 'b', 'w', 'g', 'd', 'e',
			  'v', 'z', 'i', 'j', 'k', 'l',
			  'm', 'n', 'o', 'p', 'r', 's',
			  't', 'u', 'f', 'h ', 'c', '`',
			  '[', ']', 'y', 'x', '\\', 'q']
	var cyrMap = new Object();
	for (var i = 0, len = bf.length ; i < 30 ; i++ )
		cyrMap[bf[i]] = String.fromCharCode(1072 + i)

	for (var i = 0, len = text.length; i < len; i++) {
		var originalSymbol = text[i];
		if (originalSymbol in cyrMap) {
			var symbol = cyrMap[originalSymbol]
			result += symbol
		} else {
			result += originalSymbol
		}
	}
	return result;
}

define_key(content_buffer_normal_keymap, textToCyliric("d"), "follow-new-buffer");

